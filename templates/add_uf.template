<?php

use Arrilot\BitrixMigrations\BaseMigrations\BitrixMigration;
use Arrilot\BitrixMigrations\Exceptions\MigrationException;

class __className__ extends BitrixMigration
{
    /**
     * Run the migration.
     *
     * @return mixed
     * @throws MigrationException
     */
    public function up()XML_ID of the user field
    {
        $propId = $this->addUF([
            /*
            * ID of the entity to which the property will be bound.
            * the format for the section is  - IBLOCK_{IBLOCK_ID}_SECTION
            */
            'ENTITY_ID' => 'USER',
            /* Field code. It should always start with UF_ */
            'FIELD_NAME' => '__',
            /* We specify that the type of the new user field is a string */
            'USER_TYPE_ID' => 'string',
            /*
            * XML_ID of the user field.
            * Used when uploading as a field name
            */
            'XML_ID' => '',
            /* Sorting */
            'SORT' => 500,
            /* Is the field multiple or not */
            'MULTIPLE' => 'N',
            /* Required or not property */
            'MANDATORY' => 'N',
            /*
            * Show in the list filter. Possible values:
            * don't show = N, exact match = I,
            * search by mask = E, search by substring = S
            */
            'SHOW_FILTER' => 'N',
            /*
            * Do not show in the list.
            * If you pass any value, it will be considered that the flag is set (a flaw of the bitrix developers).
            */
            'SHOW_IN_LIST' => '',
            /*
            * Do not allow user editing.
            * If you pass any value, it will be considered that the flag is set (a flaw of the bitrix developers).
            */
            'EDIT_IN_LIST' => '',
            /* Field values are included in the search */
            'IS_SEARCHABLE' => 'N',
            /*
            * Additional field settings (depending on the type).
            * In our case, for the string type
            */
            'SETTINGS' => array(
                /* Default value */
                'DEFAULT_VALUE' => '',
                /* The size of the input field to display */
                'SIZE' => '20',
                /* Number of input field lines */
                'ROWS' => '1',
                /* Minimum string length (0 - do not check) */
                'MIN_LENGTH' => '0',
                /* Maximum string length (0 - do not check) */
                'MAX_LENGTH' => '0',
                /* Regular expression to check */
                'REGEXP' => '',
            ),
            /* Signature in edit form */
            'EDIT_FORM_LABEL' => array(
                'en' => 'User field',
            ),
            /* Title in the list */
            'LIST_COLUMN_LABEL' => array(
                'en' => 'User field',
            ),
            /* Filter label in the list */
            'LIST_FILTER_LABEL' => array(
                'en' => 'User field',
            ),
            /* Error message (optional) */
            'ERROR_MESSAGE' => array(
                'en' => 'An error in completing the user field',
            ),
            /* Help */
            'HELP_MESSAGE' => [
                'en' => '',
            ],
        ]);
    }

    /**
     * Reverse the migration.
     *
     * @return mixed
     * @throws MigrationException
     */
    public function down()
    {
        $code = '__';

        $id = $this->getUFIdByCode('USER', $code);
        if (!$id) {
            throw new MigrationException('No found user field to delete');
        }

        (new CUserTypeEntity())->delete($id);
    }
}
